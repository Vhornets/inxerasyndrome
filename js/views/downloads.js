// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function(require, exports, module) {
  var $, Backbone, BandcampPlayerTpl, DownloadsTpl, DownloadsView, Releases, SoudcloudPlayerTpl, cookies, _;
  $ = require('jquery');
  _ = require('underscore');
  Backbone = require('backbone');
  cookies = require('utils/cookies');
  Releases = require('collections/releases');
  DownloadsTpl = require('text!templates/downloads.tpl');
  SoudcloudPlayerTpl = require('text!templates/soundcloud_player.tpl');
  BandcampPlayerTpl = require('text!templates/bandcamp_player.tpl');
  return DownloadsView = (function(_super) {
    __extends(DownloadsView, _super);

    function DownloadsView() {
      return DownloadsView.__super__.constructor.apply(this, arguments);
    }

    DownloadsView.prototype.el = '.content';

    DownloadsView.prototype.events = {
      'click .controls>a': 'toggleView',
      'click .per-page>li>a': 'changePerPage'
    };

    DownloadsView.prototype.initialize = function() {
      this.perPage = 2;
      this.mainEvents();
      return this.rendered = false;
    };

    DownloadsView.prototype.render = function(page, filter) {
      var releases, template;
      if (page == null) {
        page = 0;
      }
      if (filter == null) {
        filter = false;
      }
      releases = new Releases();
      template = _.template(DownloadsTpl);
      return releases.fetch({
        success: (function(_this) {
          return function(col, data) {
            data = _this.model.parseDbCells(data);
            releases = filter && filter !== 'All' ? _.where(data, {
              project: filter
            }) : data;
            _this.rendered = true;
            _this.$el.html(template({
              releases: _this.paginate(releases, page, _this.perPage),
              pages: releases.length / _this.perPage < 1.25 ? 1 : Math.floor(releases.length / _this.perPage) + 1,
              projects: _.uniq(data, true, function(el) {
                return el.project;
              }),
              currentFilter: filter ? filter : 'All',
              perPage: _this.perPage
            }));
            return _this.$el.trigger('view:ready').trigger('page:active', page);
          };
        })(this)
      });
    };

    DownloadsView.prototype.toggleView = function(e) {
      var $currentControlBtn;
      e.preventDefault();
      $currentControlBtn = $(e.currentTarget);
      cookies.set('cur-view-show', $currentControlBtn.attr('data-show'), {
        expires: 3600000
      });
      cookies.set('cur-view-hide', $currentControlBtn.attr('data-hide'), {
        expires: 3600000
      });
      return this.$el.trigger('view:ready');
    };

    DownloadsView.prototype.changePerPage = function(e) {
      e.preventDefault();
      this.perPage = $(e.currentTarget).attr('data-perpage');
      return this.render();
    };

    DownloadsView.prototype.paginate = function(data, page, perPage) {
      data = _.rest(data, perPage * page);
      return data = _.first(data, perPage);
    };

    DownloadsView.prototype.mainEvents = function() {
      $(document).on('hide.bs.modal', '#myModal', function(e) {
        if (window.history.length > 2) {
          return window.history.back();
        } else {
          return window.location.hash = '';
        }
      });
      return this.$el.on('view:ready', function(e) {
        $(cookies.get('cur-view-hide')).hide();
        return $(cookies.get('cur-view-show')).show();
      }).on('page:active', function(e, num) {
        return $('.page-num-' + (num + 1)).addClass('active');
      });
    };

    return DownloadsView;

  })(Backbone.View);
});
